from kivy.app import App
from kivy.uix.widget import Widget
from kivy.uix.image import Image
from kivy.animation import Animation
from kivy.core.window import Window
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.label import Label
from kivy.core.audio import SoundLoader
from kivy.properties import NumericProperty
from kivy.clock import Clock
import random

class Ant(Widget):
    def __init__(self, sound, **kwargs):
        super(Ant, self).__init__(**kwargs)
        self.sound = sound
        self.ant_image = Image(source='ant.png', size_hint=(None, None), size=(200, 200))
        self.add_widget(self.ant_image)
        self.start_animation()

        # Bind touch event to the ant image
        self.ant_image.bind(on_touch_down=self.on_ant_touch_down)

    def start_animation(self):
        # Set the initial position off the right side of the screen
        self.ant_image.x = Window.width
        self.ant_image.y = random.randint(0, Window.height - self.ant_image.height)

        # Create the animation to move the ant to the left side of the screen
        self.animation = Animation(x=-self.ant_image.width, duration=5)
        self.animation.bind(on_complete=self.reset_position)
        self.animation.start(self.ant_image)

    def reset_position(self, animation, ant_image):
        # Reset the ant's position to start again from the right side
        if self.parent:  # Check if the parent is not None
            self.parent.decrement_score()
        self.ant_image.x = Window.width
        self.ant_image.y = random.randint(0, Window.height - self.ant_image.height)
        self.animation.start(self.ant_image)

    def on_ant_touch_down(self, instance, touch):
        if self.ant_image.collide_point(*touch.pos):
            self.sound.play()
            if self.parent:  # Ensure the parent exists before adding new ants
                self.parent.add_ant()
                self.parent.add_ant()
                self.parent.remove_widget(self)  # Remove the touched ant
            return True
        return False

class AntScreen(FloatLayout):
    score = NumericProperty(10)

    def __init__(self, **kwargs):
        super(AntScreen, self).__init__(**kwargs)
        sound_path = '/storage/emulated/0/Documents/bong.wav'
        self.sound = SoundLoader.load(sound_path)
        if self.sound:
            print("Sound loaded successfully")
        else:
            print("Failed to load sound")

        self.score_label = Label(text=str(self.score), color=(1, 0, 0, 1), size_hint=(None, None), pos_hint={'right': 1, 'top': 1}, font_size='20sp')
        self.add_widget(self.score_label)

    def add_ant(self, x=None, y=None):
        if x is None and y is None:
            x = Window.width  # Start from the right side of the screen
            y = random.randint(0, Window.height - 200)
        ant = Ant(sound=self.sound)
        ant.ant_image.pos = (x, y)
        self.add_widget(ant)

    def decrement_score(self):
        self.score -= 1
        self.score_label.text = str(self.score)
        if self.score <= 0:
            self.game_over()

    def game_over(self):
        # Remove all ants
        for child in self.children[:]:
            if isinstance(child, Ant):
                self.remove_widget(child)
        # Display "GAME OVER" message
        game_over_label = Label(text="GAME OVER", color=(1, 0, 0, 1), font_size='50sp', size_hint=(None, None), pos_hint={'center_x': 0.5, 'center_y': 0.5})
        self.add_widget(game_over_label)

class AntApp(App):
    def build(self):
        screen = AntScreen()
        screen.add_ant()  # Add the initial ant
        return screen

if __name__ == '__main__':
    AntApp().run()
    
  
